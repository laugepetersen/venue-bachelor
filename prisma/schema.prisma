datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  LANDLORD
  USER
}

model User {
  id               String         @id @db.Uuid
  email            String         @unique
  name             String?
  role             Role           @default(USER)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  venues           Venue[]
  saved            SavedVenue[]
  conversations    Conversation[]
  sentMessages     Message[]      @relation(name: "creator")
  receivedMessages Message[]      @relation(name: "recipient")

  @@map("users")
}

enum FileType {
  JPG
  PNG
  PDF
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  fileType  FileType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media")
}

model Conversation {
  id        Int       @id @default(autoincrement())
  users     User[]
  messages  Message[]
  venue     Venue     @relation(fields: [venueId], references: [id])
  venueId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  text           String
  recipient      User         @relation(name: "recipient", fields: [recipientId], references: [id])
  recipientId    String       @db.Uuid
  createdBy      User         @relation(name: "creator", fields: [createdById], references: [id])
  createdById    String       @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  seen           Boolean      @default(false)
  editedAt       DateTime?
  createdAt      DateTime     @default(now())

  @@map("messages")
}

model SavedVenue {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id])
  venueId Int

  @@unique([userId, venueId])
  @@map("saved_venues")
}

model Venue {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @db.Uuid
  name         String
  propertyType String
  minCapacity  Int
  maxCapacity  Int
  minPrice     Int
  address      String
  savedBy      SavedVenue[]
  Conversation Conversation[]

  @@map("venues")
}
